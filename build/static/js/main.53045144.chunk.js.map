{"version":3,"sources":["components/Button.jsx","main/Calculator.jsx","components/Display.jsx","reportWebVitals.js","index.js"],"names":["props","classes","operation","doubleColumn","operationB","doubleRow","onClick","e","click","label","className","initialState","displayValue","clearDisplay","values","current","Calculator","state","clearMemory","bind","setOperation","addDigit","this","setState","equals","currentOperation","eval","n","includes","i","newValue","parseFloat","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53045144.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n    let classes = 'button'\r\n    classes += props.operation ? ' operation' : ''\r\n    classes += props.doubleColumn ? ' doubleColumn' : ''\r\n    classes += props.operationB ? ' operationB' : ''\r\n    classes += props.doubleRow ? ' doubleRow' : ''\r\n\r\n    return(\r\n        <button \r\n            onClick={e => props.click && props.click(props.label)}\r\n            className={classes}>\r\n                {props.label}\r\n        </button>\r\n    )\r\n}","import React, {Component} from 'react'\r\nimport './Calculator.css'\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display'\r\n\r\n/**Estado inicial da Calculdoura */\r\nconst initialState = {\r\n    displayValue: '0', // Valor impresso no visor\r\n    clearDisplay: false, // Limpar visor\r\n    operation: null, // Qual operação será feita\r\n    values: [0, 0], // Array para identificar quais será os valores a serem multiplicados, divididos, etc.\r\n    current: 0 // Saber qual indice do array será utilizado\r\n}\r\n\r\nexport default class Calculator extends Component{\r\n\r\n    \r\n    state = { ...initialState}// Adiciona o estado inicial (linhas 6 a 13) ao estado ja existente dessa classe\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory(){\r\n        /** Volta para o estado inicial mostrado na linha 6 a 13.*/\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation){\r\n        \r\n        if (this.state.current === 0) {//se caso o array estiver somente com o indice 0 preenchi o sistem pede o sequindo valor\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {//como o 'current' no sistema so tem dois valores (0 e 1) então se o corrent não tem com '0' e estara com '1', isso significa que esta tudo preparado para fazer a operação pedida \r\n            \r\n            const equals = operation === '=' //caso ele queria terminar a opera o equals é true\r\n            const currentOperation = this.state.operation\r\n            \r\n            const values = [...this.state.values]\r\n            try {\r\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)//Fazendo a operação\r\n            } catch(e) {\r\n                values[0] = this.state.values[0]\r\n            }\r\n\r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation, //aqui usamos o equals da linha 38\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n){\r\n        /**Regras para evitar numeros faláciosos como: 58.24.8.9 (mais de um ponto no numero) e/ou 000005 (varios zeros no numero)*/\r\n        if (n === '.' && this.state.displayValue.includes('.')) {\r\n            return\r\n        }\r\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        /** Adicionando o valor digitado no visor para o array (fazendo a logica para saber se o numero digitado vai no indice 0 ou 1) e fazendo o tratamento correto desse numero no*/\r\n        if (n !== '.') {\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className='calculator'>\r\n                <Display value={this.state.displayValue} />\r\n                <Button label=\"AC\" click={this.clearMemory} operationB doubleColumn/>\r\n                <Button label=\"/\" click={this.setOperation} operation/>\r\n                <Button label=\"*\" click={this.setOperation} operation/>\r\n                <Button label=\"7\" click={this.addDigit}/>\r\n                <Button label=\"8\" click={this.addDigit}/>\r\n                <Button label=\"9\" click={this.addDigit}/>\r\n                <Button label=\"-\" click={this.setOperation} operation/>\r\n                <Button label=\"4\" click={this.addDigit}/>\r\n                <Button label=\"5\" click={this.addDigit}/>\r\n                <Button label=\"6\" click={this.addDigit}/>\r\n                <Button label=\"+\" click={this.setOperation} operation/>\r\n                <Button label=\"1\" click={this.addDigit}/>\r\n                <Button label=\"2\" click={this.addDigit}/>\r\n                <Button label=\"3\" click={this.addDigit}/>\r\n                <Button label=\"=\" click={this.setOperation} operationB doubleRow/>\r\n                <Button label=\"0\" click={this.addDigit} doubleColumn/>\r\n                <Button label=\".\" click={this.addDigit}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props =>\r\n    <div className=\"display\">\r\n        {props.value}\r\n    </div>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from'./main/Calculator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <h1>Calculadora</h1>\n    <Calculator/>\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}